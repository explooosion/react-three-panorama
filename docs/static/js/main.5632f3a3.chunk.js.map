{"version":3,"sources":["reducers/example.js","sagas/index.js","services/Example.js","sagas/example.js","sagas sync /^/.*$","components/Panorama.js","pages/Home.js","routes/index.js","App.js","reducers/index.js","store/index.js","theme/index.js","index.js"],"names":["FETCH_EXAMPLE","FETCH_EXAMPLE_SUCCESS","FETCH_EXAMPLE_ERROR","initialState","lists","loading","error","state","action","type","payload","rootSaga","Sagas","map","saga","require","default","all","getExample","dispatch","a","axios","get","then","res","data","catch","fetchExample","Example","call","response","status","put","takeLatest","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","scene","camera","renderer","controls","stats","requestAnimation","step","Main","styled","main","Home","props","webglEl","useRef","StatsEl","images","autoPlay","resourceMode","renderBitmap","isArray","getTexturesFromSplitFile","textures","getTexturesFromMergeFile","materials","forEach","texture","push","THREE","mesh","geometry","scale","add","renderGeometry","load","sphereGeometry","sphereMaterial","sphere","imgs","Promise","img","length","Array","from","imageObj","Image","src","onload","canvas","context","tileWidth","height","t","i","document","createElement","getContext","width","drawImage","image","needsUpdate","onResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","animate","requestAnimationFrame","update","z","Math","sin","PI","x","cos","position","set","y","autoCamera","render","useEffect","cancelAnimationFrame","setPixelRatio","devicePixelRatio","current","innerHTML","appendChild","domElement","OrbitControls","enableZoom","enablePan","enableDamping","rotateSpeed","dampingFactor","axes","Stats","iniThree","setMode","style","left","top","addEventListener","ref","defaultProps","Form","div","rgba","key","path","exact","component","useState","selected","setSelected","setAutoPlay","list","label","value","onChange","target","item","index","checked","htmlFor","Panorama","title","App","Routes","route","Component","Helmet","combineReducers","example","sagaMiddleware","createSagaMiddleware","createStore","reducers","composeWithDevTools","applyMiddleware","run","DefaultTheme","black","white","gray","blue","green","red","globalFont","screenXs","screenSm","screenMd","screenLg","screenXl","GlobalStyle","createGlobalStyle","p","theme","ReactDOM","store","getElementById"],"mappings":"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","file":"static/js/main.5632f3a3.chunk.js","sourcesContent":["export const FETCH_EXAMPLE = 'FETCH_EXAMPLE';\nexport const FETCH_EXAMPLE_SUCCESS = 'FETCH_EXAMPLE_SUCCESS';\nexport const FETCH_EXAMPLE_ERROR = 'FETCH_EXAMPLE_ERROR';\n\nconst initialState = {\n  lists: [],\n  loading: false,\n  error: null,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_EXAMPLE:\n      return { ...state, loading: true };\n    case FETCH_EXAMPLE_SUCCESS:\n      return { ...state, lists: action.payload, loading: false };\n    case FETCH_EXAMPLE_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    default:\n      return state;\n  }\n}\n","import { all } from 'redux-saga/effects';\n\nconst sagas = [\n  'example',\n];\n\nconst Sagas = sagas.map(saga => require(`./${saga}`).default());\n\nexport default function* rootSaga() {\n  yield all(Sagas);\n}\n","import axios from 'axios';\n\nimport { FETCH_EXAMPLE, FETCH_EXAMPLE_SUCCESS, FETCH_EXAMPLE_ERROR } from '../reducers/example';\n\nconst URL = '';\n\n/**\n * FETCH USERS - redux saga\n */\nexport const getUsers = async () =>\n    axios.get(URL)\n    .then(res => res)\n    .catch(err => err);\n\n/**\n * FETCH EXAMPLE - redux thunk\n */\nexport const getExample = () => async dispatch => {\n  await dispatch({ type: FETCH_EXAMPLE });\n  await axios\n    .get(URL)\n    .then(res => dispatch({ type: FETCH_EXAMPLE_SUCCESS, payload: res.data }))\n    .catch(res => dispatch({ type: FETCH_EXAMPLE_ERROR, payload: res }))\n}\n","import { call, put, takeLatest } from 'redux-saga/effects';\n\nimport { FETCH_EXAMPLE, FETCH_EXAMPLE_SUCCESS, FETCH_EXAMPLE_ERROR } from '../reducers/example';\n\nimport { getExample } from '../services/Example';\n\nfunction* fetchExample() {\n  while (true) {\n    const response = yield call(getExample);\n    if (response.status === 200) {\n      yield put({ type: FETCH_EXAMPLE_SUCCESS, payload: response.data });\n    } else {\n      yield put({ type: FETCH_EXAMPLE_ERROR, payload: response.data });\n    }\n  }\n}\n\nexport default function* Example() {\n  yield takeLatest(FETCH_EXAMPLE, fetchExample);\n}\n","var map = {\n\t\"./\": 26,\n\t\"./example\": 47,\n\t\"./example.js\": 47,\n\t\"./index\": 26,\n\t\"./index.js\": 26\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 75;","import React, { useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types';\nimport * as THREE from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport Stats from 'stats.js';\nimport { isArray } from 'lodash';\n\nimport styled from 'styled-components';\n\nlet scene;\nlet camera;\nlet renderer;\nlet controls;\nlet stats;\n\nlet requestAnimation;\n\nlet step = 0;\n\nconst Main = styled.main`\n`;\n\nfunction Home(props) {\n\n  const webglEl = useRef(null);\n  const StatsEl = useRef(null);\n\n  const { images, autoPlay, resourceMode } = props;\n\n  const iniThree = () => {\n\n    cancelAnimationFrame(requestAnimation);\n\n    // Create renderer\n    renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    webglEl.current.innerHTML = '';\n    webglEl.current.appendChild(renderer.domElement);\n\n    // Createa scene\n    scene = new THREE.Scene();\n\n    // Create camera\n    camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 1;\n\n    // Create camera controller\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableZoom = false;\n    controls.enablePan = false;\n    controls.enableDamping = true;\n    controls.rotateSpeed = - 0.25;\n    controls.dampingFactor = 0.8\n    // controls.addEventListener(\"change\", () => console.log(camera.position.x, camera.position.z));\n\n    // Create axis line\n    const axes = new THREE.AxesHelper(1000);\n    scene.add(axes);\n\n    // Createa stas info\n    stats = new Stats();\n\n    switch (resourceMode) {\n      case 0:\n        renderBitmap();\n        break;\n      case 1:\n        renderGeometry();\n        break;\n      default:\n        throw Error(`Unknow resource mode ${resourceMode}`);\n    }\n\n    animate();\n  }\n\n  const renderBitmap = async () => {\n    let textures;\n    if (isArray(images)) {\n      textures = await getTexturesFromSplitFile(images);\n    } else {\n      textures = await getTexturesFromMergeFile(images);\n    }\n\n    const materials = [];\n    textures.forEach(texture =>\n      materials.push(new THREE.MeshBasicMaterial({ map: texture }))\n    );\n\n    const mesh = new THREE.Mesh(new THREE.BoxGeometry(50, 50, 50), materials);\n    mesh.geometry.scale(1, 1, -1);\n    scene.add(mesh);\n  }\n\n  const renderGeometry = () => {\n    const texture = new THREE.TextureLoader().load(images);\n    const sphereGeometry = new THREE.SphereGeometry(50, 50, 50);\n    const sphereMaterial = new THREE.MeshBasicMaterial({ map: texture });\n    const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n    // Debug line\n    // sphere.material.wireframe = true;\n    sphereGeometry.scale(1, 1, -1);\n    scene.add(sphere);\n  }\n\n  const getTexturesFromSplitFile = (imgs = []) => {\n    return Promise.all(imgs.map(img => new THREE.TextureLoader().load(img)));\n  }\n\n  const getTexturesFromMergeFile = (img, length = 6) => {\n    return new Promise(resolve => {\n      let textures = Array.from({ length });\n      const imageObj = new Image();\n      imageObj.src = img;\n      imageObj.onload = () => {\n        let canvas;\n        let context;\n        const tileWidth = imageObj.height;\n        textures = textures.map((t, i) => {\n          const texture = new THREE.Texture();\n          canvas = document.createElement('canvas');\n          context = canvas.getContext('2d');\n          canvas.height = tileWidth;\n          canvas.width = tileWidth;\n          context.drawImage(imageObj, tileWidth * i, 0, tileWidth, tileWidth, 0, 0, tileWidth, tileWidth);\n          texture.image = canvas;\n          texture.needsUpdate = true;\n          return texture;\n        });\n        resolve(textures);\n      };\n    });\n  }\n\n  const initStats = () => {\n    stats.setMode(0); // 0: fps, 1: ms\n    stats.domElement.style.position = 'absolute';\n    stats.domElement.style.left = '0px';\n    stats.domElement.style.top = '0px';\n    StatsEl.current.appendChild(stats.domElement);\n    return stats;\n  }\n\n  const onResize = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  const autoCamera = () => {\n    if (autoPlay) {\n      step += 0.05;\n      const z = Math.sin(Math.PI / 180 * step);\n      const x = Math.cos(Math.PI / 180 * step);\n      camera.position.set(x, camera.position.y, z);\n      // camera.lookAt(scene.position);\n      if (step === 360) {\n        step = 0;\n      }\n    }\n  }\n\n  const animate = () => {\n    requestAnimation = requestAnimationFrame(animate);\n    controls.update();\n    stats.update();\n    autoCamera();\n    renderer.render(scene, camera);\n  }\n\n  useEffect(() => {\n    iniThree();\n    initStats();\n    window.addEventListener('resize', onResize, false);\n  });\n\n  return (\n    <Main>\n      <div ref={webglEl} />\n      <div ref={StatsEl} style={{ position: 'absolute', left: '20px', top: '15px' }} />\n    </Main>\n  )\n}\n\nHome.defaultProps = {\n  resourceMode: 1,\n}\n\nHome.propTypes = {\n  resourceMode: PropTypes.number,\n  images: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n}\nexport default Home;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { rgba } from 'polished';\n\nimport Panorama from '../components/Panorama';\n\nconst Main = styled.main`\n`;\n\nconst Form = styled.div`\n  position: absolute;\n  top: 80px;\n  left: 20px;\n  padding: 1rem;\n  color: #fff;\n  background-color: ${() => rgba('#fff', .3)};\n  border-radius: .25rem;\n\n  select {\n    margin-bottom: .5rem;\n  }\n\n  label {\n    cursor: pointer;\n    user-select: none;\n  }\n`;\n\nfunction Home() {\n\n  const [selected, setSelected] = useState(1);\n  const [autoPlay, setAutoPlay] = useState(false);\n\n  const list = [\n    {\n      label: '2D_Spilit',\n      resourceMode: 0,\n      images: [\n        './room1/cubemap_r.jpg',\n        './room1/cubemap_l.jpg',\n        './room1/cubemap_u.jpg',\n        './room1/cubemap_d.jpg',\n        './room1/cubemap_f.jpg',\n        './room1/cubemap_b.jpg',\n      ],\n    },\n    {\n      label: '2D_Merge',\n      resourceMode: 0,\n      images: './2D_Merge.jpg',\n    },\n    {\n      label: '360°_View',\n      resourceMode: 1,\n      images: './360_View.jpg',\n    },\n  ];\n\n  return (\n    <Main>\n      <Form>\n        <select value={selected} onChange={(e) => setSelected(e.target.value)} >\n          {list.map((item, index) => <option key={item.label} value={index} >{item.label}</option>)}\n        </select>\n        <div>\n          <input id=\"chkAutoPlay\" type=\"checkbox\" value={autoPlay} onChange={(e) => setAutoPlay(e.target.checked)} />\n          <label htmlFor=\"chkAutoPlay\">AutoPlay</label>\n        </div>\n      </Form>\n      <Panorama images={list[selected].images} autoPlay={autoPlay} resourceMode={list[selected].resourceMode} />\n    </Main>\n  )\n}\n\nexport default Home;\n","import Home from '../pages/Home';\n\nexport default [\n  {\n    key: 'root',\n    path: '/',\n    exact: true,\n    component: Home,\n    title: 'Example',\n  },\n]\n","import React from 'react';\nimport { Switch, HashRouter as Router, Route } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\n\nimport Routes from './routes';\n\nfunction App() {\n  const renderRoute = route => {\n    const { key, path, exact, component: Component, title } = route;\n    return (\n      <Route\n        key={key}\n        exact={exact}\n        path={path}\n        title={title}\n        render={props => (\n          <>\n            <Helmet>\n              <title>{title}</title>\n            </Helmet>\n            <Component {...props} />\n          </>\n        )}\n      />\n    );\n  }\n\n  return (\n    <Router>\n      <Switch>\n        {Routes.map(renderRoute)}\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport example from './example';\n\nexport default combineReducers({\n  example,\n})\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n// import thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport reducers from '../reducers';\nimport rootSaga from '../sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default createStore(\n  reducers,\n  composeWithDevTools(\n    applyMiddleware(sagaMiddleware),\n  )\n);\n\nsagaMiddleware.run(rootSaga);\n","const color = {\n  black: '#111',\n  white: '#fefefe',\n  gray: '#87868c',\n  blue: '#1e78a9',\n  green: '#009f9d',\n  red: '#f2724f',\n}\n\nconst font = {\n  globalFont: `'Microsoft JhengHei', 'Segoe UI', Helvetica, Arial, Helvetica, sans-serif;`,\n}\n\nconst screen = {\n  screenXs: '480px',\n  screenSm: '576px',\n  screenMd: '768px',\n  screenLg: '992px',\n  screenXl: '1200px',\n}\n\nexport const DefaultTheme = {\n  ...color,\n  ...font,\n  ...screen,\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\n\nimport App from './App';\nimport store from './store';\nimport { DefaultTheme } from './theme';\n\nconst GlobalStyle = createGlobalStyle`\n\n  *,\n  ::after,\n  ::before {\n    box-sizing: border-box;\n  }\n\n  html,\n  body {\n    overflow: hidden;\n    margin: 0;\n    padding: 0;\n    font-family: ${p => p.theme.globalFont};\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nReactDOM.render(\n  <ThemeProvider theme={DefaultTheme}>\n    <GlobalStyle />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}